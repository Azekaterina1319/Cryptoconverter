import logging
from telegram import ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ConversationHandler, filters
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–∏–∞–ª–æ–≥–∞
SELECT_BASE_CURRENCY, SELECT_TARGET_CURRENCY, INPUT_AMOUNT = range(3)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
currency_keyboard = ReplyKeyboardMarkup([['USD', 'EUR', 'RUB']], resize_keyboard=True)
cancel_keyboard = ReplyKeyboardMarkup([['/cancel']], resize_keyboard=True)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "–í–∞—à —Ç–æ–∫–µ–Ω —Å –¢–µ–ª–µ–≥—Ä–∞–º–º"
EXCHANGE_API_KEY = "–í–∞—à API –∫–ª—é—á"
API_URL = f"https://v6.exchangerate-api.com/v6/{EXCHANGE_API_KEY}/pair/"

# –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ)
user_data = {}


async def start(update, context):
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã, –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –∏—Å—Ö–æ–¥–Ω—É—é –≤–∞–ª—é—Ç—É"""
    await update.message.reply_text(
        "üí∞ *–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç* üí∞\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—É—é –≤–∞–ª—é—Ç—É:",
        reply_markup=currency_keyboard,
        parse_mode="Markdown"
    )
    return SELECT_BASE_CURRENCY


async def select_base_currency(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏—Å—Ö–æ–¥–Ω–æ–π –≤–∞–ª—é—Ç—ã"""
    user_data['base_currency'] = update.message.text
    await update.message.reply_text(
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:",
        reply_markup=currency_keyboard
    )
    return SELECT_TARGET_CURRENCY


async def select_target_currency(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–µ–≤–æ–π –≤–∞–ª—é—Ç—ã"""
    user_data['target_currency'] = update.message.text
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:",
        reply_markup=cancel_keyboard
    )
    return INPUT_AMOUNT


async def convert_amount(update, context):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å—É–º–º—ã"""
    try:
        amount = float(update.message.text)
        base = user_data['base_currency']
        target = user_data['target_currency']

        response = requests.get(f"{API_URL}{base}/{target}/{amount}")
        data = response.json()

        if data['result'] == 'success':
            await update.message.reply_text(
                f"üí± –†–µ–∑—É–ª—å—Ç–∞—Ç:\n"
                f"{amount} {base} = {data['conversion_result']} {target}\n"
                f"–ö—É—Ä—Å: 1 {base} = {data['conversion_rate']} {target}",
                reply_markup=currency_keyboard
            )
        else:
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")

        return SELECT_BASE_CURRENCY
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")
        return INPUT_AMOUNT


async def cancel(update, context):
    """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    await update.message.reply_text(
        "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start",
        reply_markup=currency_keyboard
    )
    return ConversationHandler.END


def main():
    application = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            SELECT_BASE_CURRENCY: [MessageHandler(filters.Regex('^(USD|EUR|RUB)$'), select_base_currency)],
            SELECT_TARGET_CURRENCY: [MessageHandler(filters.Regex('^(USD|EUR|RUB)$'), select_target_currency)],
            INPUT_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, convert_amount)],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    application.add_handler(conv_handler)
    application.run_polling()


if __name__ == '__main__':
    main()
